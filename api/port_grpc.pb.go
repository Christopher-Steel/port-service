// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/port.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortClient is the client API for Port service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortClient interface {
	AddOrUpdate(ctx context.Context, in *AddOrUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type portClient struct {
	cc grpc.ClientConnInterface
}

func NewPortClient(cc grpc.ClientConnInterface) PortClient {
	return &portClient{cc}
}

func (c *portClient) AddOrUpdate(ctx context.Context, in *AddOrUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/PortService.Port/AddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServer is the server API for Port service.
// All implementations must embed UnimplementedPortServer
// for forward compatibility
type PortServer interface {
	AddOrUpdate(context.Context, *AddOrUpdateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPortServer()
}

// UnimplementedPortServer must be embedded to have forward compatible implementations.
type UnimplementedPortServer struct {
}

func (UnimplementedPortServer) AddOrUpdate(context.Context, *AddOrUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdate not implemented")
}
func (UnimplementedPortServer) mustEmbedUnimplementedPortServer() {}

// UnsafePortServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServer will
// result in compilation errors.
type UnsafePortServer interface {
	mustEmbedUnimplementedPortServer()
}

func RegisterPortServer(s grpc.ServiceRegistrar, srv PortServer) {
	s.RegisterService(&Port_ServiceDesc, srv)
}

func _Port_AddOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).AddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortService.Port/AddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).AddOrUpdate(ctx, req.(*AddOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Port_ServiceDesc is the grpc.ServiceDesc for Port service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Port_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortService.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrUpdate",
			Handler:    _Port_AddOrUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/port.proto",
}
